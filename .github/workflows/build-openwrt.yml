# Build OpenWrt using GitHub Actions

name: Build OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

env:
  REPO_URL: https://github.com/openwrt/openwrt.git
  REPO_BRANCH: openwrt-24.10
  REPO_DEPTH: 1
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  FILES_PATH: files
  PATCHES_PATH: patches
  UPLOAD_RELEASE: true
  TZ: Asia/Ho_Chi_Minh
jobs:
  build:
    runs-on: ubuntu-latest


    steps:
    - name: Checkout
      uses: actions/checkout@main
      with:
        fetch-depth: 1

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential ccache ecj fastjar file g++ gawk \
        gettext git java-propose-classpath libelf-dev libncurses5-dev \
        libncursesw5-dev libssl-dev python2 python2.7-dev python3 python3-dev \
        unzip wget python3-distutils python3-setuptools rsync subversion \
        swig time xsltproc zlib1g-dev

        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        git clone --depth $REPO_DEPTH --branch $REPO_BRANCH $REPO_URL openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Cache OpenWrt
  uses: actions/cache@v4
  env:
    cache-name: cache-openwrt
  with:
    path: |
      openwrt/staging_dir
      openwrt/build_dir
      openwrt/dl
    key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ env.REPO_BRANCH }}
    restore-keys: |
      ${{ runner.os }}-build-${{ env.cache-name }}-
      
    - name: Check cache
      run: |
        [ -d openwrt/staging_dir ] && echo "Found staging_dir cache" || echo "No staging_dir cache"
        [ -d openwrt/build_dir ] && echo "Found build_dir cache" || echo "No build_dir cache"
        [ -d openwrt/dl ] && echo "Found dl cache" ||  echo "No dl cache"
        ls -al openwrt

    - name: Setup feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Load custom files
      run: |
        [ -d $FILES_PATH ] && mv $FILES_PATH openwrt/files
        cd openwrt && git status -s

    - name: Load custom config
      run: |
        [ -f $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config && echo 'Custom config loaded!' || echo 'No custom config!'

    - name: Apply patches
  run: |
    [ -d $PATCHES_PATH ] && mv $PATCHES_PATH openwrt/$PATCHES_PATH
    cd openwrt
    [ -d $PATCHES_PATH ] && for FILE in $(ls $PATCHES_PATH | grep .patch); do 
      echo "Applying $FILE" 
      git apply --check $PATCHES_PATH/$FILE
      if [ $? -eq 0 ]; then
        git apply $PATCHES_PATH/$FILE 
        echo "$FILE applied successfully"
      else
        echo "Failed to apply $FILE"
        git apply $PATCHES_PATH/$FILE || true
        echo "Error details:"
        git apply --check $PATCHES_PATH/$FILE || echo "Patch $FILE failed at this step."
        exit 1 
      fi 
    done
    git status -s

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
    
    - name: Read config target
      run: |
        cd openwrt
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/^CONFIG_TARGET_(.*)_(.*)_DEVICE_(.*)=y/\1/' > ARCH_NAME
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/^CONFIG_TARGET_(.*)_(.*)_DEVICE_(.*)=y/\2/' > CPU_NAME
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/^CONFIG_TARGET_(.*)_(.*)_DEVICE_(.*)=y/\3/' > DEVICE_NAME
        [ -s ARCH_NAME ] && echo "ARCH_NAME=$(cat ARCH_NAME)" >> $GITHUB_ENV
        [ -s CPU_NAME ] && echo "CPU_NAME=$(cat CPU_NAME)" >> $GITHUB_ENV
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo -e "Arch: $(cat ARCH_NAME)\nCPU: $(cat CPU_NAME)\nDevice: $(cat DEVICE_NAME)"

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "Available core: $(nproc)"
        COMPILE_THREADS=$(($(nproc) + 1))
        echo "Compile threads: ${COMPILE_THREADS}"
        make -j${COMPILE_THREADS} || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"

    - name: Build PbBoot firmware
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
          cd openwrt/bin/targets/$ARCH_NAME/$CPU_NAME
          dd if=/dev/zero bs=4M count=1 | tr "\000" "\377" > padded_kernel.bin && \
          dd if=openwrt-${ARCH_NAME}-${CPU_NAME}-${DEVICE_NAME}-squashfs-kernel1.bin of=padded_kernel.bin conv=notrunc && \
          cat padded_kernel.bin openwrt-${ARCH_NAME}-${CPU_NAME}-${DEVICE_NAME}-squashfs-rootfs0.bin > openwrt-${ARCH_NAME}-${CPU_NAME}-${DEVICE_NAME}-squashfs-pbboot.bin && \
          rm -rf padded_kernel.bin && \
          sha256sum -b openwrt-${ARCH_NAME}-${CPU_NAME}-${DEVICE_NAME}-squashfs-pbboot.bin >> sha256sums

    - name: Prepare release
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        touch release.txt
        echo "Branch: $REPO_BRANCH" >> release.txt
        echo "Date: $(date +"%Y-%m-%d_%H:%M")" >> release.txt
        echo "Arch: $ARCH_NAME" >> release.txt
        echo "CPU: $CPU_NAME" >> release.txt
        echo "Deivce: $DEVICE_NAME" >> release.txt
        cd openwrt/bin/targets/$ARCH_NAME/$CPU_NAME
        rm -rf packages
        echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV

    - name: Upload release
      uses: softprops/action-gh-release@v1
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.REPO_BRANCH }}
        body_path: release.txt
        files: ${{ env.FIRMWARE_PATH }}/*

    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 7
        keep_minimum_runs: 2

    - name: Remove old releases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 2
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
